name: Terraform

on:
  push:
    branches: [development, staging, production, release]
  workflow_dispatch:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_SECRET }}
    defaults:
      run:
        working-directory: terraform/development
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      # - name: Terraform Plan
      #   id: plan
      #   # if: github.event_name == 'pull_request'
      #   run: terraform plan -no-color
      #   continue-on-error: true

      # - uses: actions/github-script@0.9.0
      #   # if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      #       <details><summary>Show Plan</summary>
      #       \`\`\`${process.env.PLAN}\`\`\`
      #       </details>
      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.issues.createComment({
      #         issue_number: 1,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1

      # - name: Terraform Apply
      #   # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: terraform apply -auto-approve -input=false

      - name: Terraform Destroy
        # if: steps.plan.outcome == 'failure'
        run: terraform destroy -auto-approve
